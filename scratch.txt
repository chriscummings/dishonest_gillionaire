	# recipes = Recipe.objects.order_by('level')

	# for recipe in recipes:
	# 	print(recipe.name)
	# 	print(recipe.profession)
	# 	print(recipe.ingredients.all())

	# 	break

$$$$$$$$$$$$$$$$$$$$$




"""
# for item in marketable items:
# 	for world
# 		get last fact for both item and world
	

best_price = {}

select facts where nq_list_count > 0
sort remainder by listings_facts
get lowest nq value & world

do the same for HQ

create BestPriceNQ & BestPriceHQ

-

then for each DC
	get last() BestPrice with that item_id

"""


%%%%%%%%%%%%%%%%%%%%

wipe prior build pricing!
for recipe sorted by level
	for world (as home)
		shopping_list = []

		for ingredient
			if not already computed
				best_region_price = None
				best_region_world = None
                #
				best_dc_price     = None
				best_dc_world     = None
				#
                best_home_price   = None

				prices = []
                
				for world
					prices.append((world,dc,region, price))
				remove prices with null data

				get best price for region(all records)
					best_region_price = y
					best_region_world = x

				get best price for DC(records with dc.id=z)
					best_dc_price = x
					best_dc_world = y

				get home world
					best_home_price = a

---

docker-compose up -d --build
docker-compose exec web python manage.py migrate
docker-compose exec web python manage.py seed_data

docker-compose exec web python manage.py fetch_xivapi_item_list
docker-compose exec web python manage.py fetch_xivapi_item_details # recovery mode will need to be toggled to false for the first run FIXME
docker-compose exec web python manage.py ingest_items

docker-compose exec web python manage.py fetch_xivapi_recipe_list
docker-compose exec web python manage.py fetch_xivapi_recipes
docker-compose exec web python manage.py ingest_recipes

docker-compose exec web python manage.py update_sales
docker-compose exec web python manage.py update_listings
docker-compose exec web python manage.py compute_facts
--
docker-compose exec web python manage.py ingest_items;docker-compose exec web python manage.py ingest_recipes
 
docker-compose exec web python manage.py update_sales;docker-compose exec web python manage.py update_listings;docker-compose exec web python manage.py compute_facts

---------------------------------------------

for item
    price_by_world=[]

    for world
        get last fact where item&world match
            price_by_world.append({name:world, price:lowest_listing_price})

    filtered = filter(price!=None ,price_by_world) # remove blanks
    sorted = sort(sort_by_price, filtered) # sort by lowest price

    get best price in DataCenter
    get best price in region

###################
BEST_PRICE_MODEL
home_world_id
item_id
best nq price in data_center_price
best nq price in data_center_world
best nq price in region_price
best nq price in region_world
best hq price in data_center_price
best hq price in data_center_world
best hq price in region_price
best hq price in region_world
#####################

---------------------------------------------

poetry init
poetry add Django
poetry shell
django-admin startproject config .
poetry run python manage.py runserver
poetry run python manage.py migrate
poetry run python manage.py test
poetry run python manage.py makemigrations; poetry run python manage.py migrate
poetry run python manage.py shell
poetry run python manage.py test

---------------------------------------------

Item.objects.all().count()
Recipe.objects.all().count()
Listing.objects.all().count()
Sale.objects.all().count()

---------------------------------------------

Item attributes to store:
=========================
CanBeHq
StackSize
ClassJobCategory:Name
IsDyeable
IsGlamourous?
IsUntradable?
IsUnique?
ItemUICategory:Name?

Aka Oni Hara-ate
https://xivapi.com/Item/19064?private_key=dd9f8560cb57415684fcfa1d1005e17eb5450d1a1c0f46ba8dd7ed9565bcb8ce

---------------------------------------------

# def _format_summary_recipes(item, indent=0):
# 	formatted_string = ""

# 	indention = ""

# 	for i in range(0, indent):
# 		indention += "\t"

# 	indent += 1

# 	# Ignore top-level item that's without a material_count.
# 	if 'material_count' in item:
# 		formatted_string += f"\n{indention}<a href=\"/items/{item['guid']}\">{item['name']} x{item['material_count']}</a>\n"

# 	formatted_string += f"{indention}<ul>\n"

# 	for recipe in item['recipes']:

# 		formatted_string += f"{indention}{indention}<li>\n"
# 		formatted_string += f"{indention}{indention}Recipe: ({recipe['profession']}):\n"
# 		formatted_string += f"{indention}{indention}<ul>\n"
# 		for ingredient in recipe['ingredients']:
# 			formatted_string += f"{indention}{indention}<li>{_format_summary_recipes(ingredient, indent)}</li>\n"
# 		formatted_string += f"{indention}{indention}</li>\n"

# 		formatted_string += f"{indention}{indention}</li>\n"
# 		formatted_string += f"{indention}{indention}</ul>\n"
# 		formatted_string += f"{indention}{indention}</li>\n"

# 	formatted_string += f"{indention}</ul>\n"

# 	return formatted_string

---------------------------------------------

https://medium.com/@nartinho/how-to-inject-a-form-in-all-pages-in-django-4f4a4ca0e5b8











